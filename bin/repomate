#!/usr/bin/env ruby

# expand path if in development mode
if File.exists?(File.join(File.join(File.dirname(__FILE__), '..', '.git')))
  $: << File.join(File.dirname(__FILE__), '..', 'lib')
end

require 'repomate'
require 'rubygems'
require 'slop'

# check for dpkg
raise "dpkg is not installed or configured" unless File.exists?(RepoMate::Cfg.dpkg)

options = Slop.parse do
  banner "RepoMate (A simple debian repository management tool)

  Usage: #{$0} add -s squeeze [-c main] <package>
         #{$0} publish
         #{$0} listpackages -r production

  Actions:
    add                - Add a package to the staging area
    publish            - Move packages from staging area to production
    save               - Save a checkpoint
    load               - Load a checkpoint
    listpackages       - List packages
    setup              - Setup the pool
    remove             - Removes a package from production

  Options:"
  on :s, :suitename=, "Set the name of the suite (lenny/squeeze...)", :argument => true
  on :c, :component=, "Set the name of the component (main/contrib...)", :default => "main"
  on :a, :architecture=, "Set the name of the component (main/contrib...)", :argument => true
  on :r, :category, "Category (stage/pool/dists)", :argument => true
  on :force, "Force action", :default => false
  on :h, :help, 'Print this help message', :tail => true do
    puts help
    exit
  end
end

cli = RepoMate::Cli.new

if ARGV.include?("add")
  filename = nil
  ARGV.each do |arg|
    if arg =~ /\.deb/
      filename = arg
    end
  end
  if filename && File.exists?(filename)
    cli.stage(options, filename)
  else
    STDERR.puts "File does not exist"
  end
elsif ARGV.include?("publish")
  cli.publish(options)
elsif ARGV.include?("save")
  cli.save_checkpoint
elsif ARGV.include?("load")
  cli.choose_checkpoint
elsif ARGV.include?("remove")
  cli.choose_package("remove")
elsif ARGV.include?("listpackages")
  cli.list_packages(options)
elsif ARGV.include?("setup")
  cli.setup(options)
else
  puts options.help
end
