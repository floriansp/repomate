var search_data = {"index":{"searchIndex":["repomate","architecture","base","category","checkpoint","cli","component","configuration","database","link","metafile","package","repository","suite","all()","all()","all()","all()","all()","allowed()","allowed()","allowed()","check_package()","check_versions()","choose_checkpoint()","cleanup()","configure()","create()","create()","create()","create()","create()","create()","create()","create()","create_checksums()","create_packages()","create_release()","create_table()","create_table()","dataset()","dataset()","dataset()","dataset()","delete_checksums()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","destroy()","directory()","directory()","directory()","directory()","exist?()","exist?()","exist?()","exist?()","exist?()","exists?()","files()","files()","get_checksums()","is_allowed?()","is_allowed?()","is_allowed?()","is_unused?()","is_unused?()","is_unused?()","list()","list_packages()","list_packages()","load()","merge()","name()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","prepare_publish()","publish()","publish()","query()","read_controlfile()","save_checkpoint()","setup()","sign()","stage()","stage()","gemfile","license"],"longSearchIndex":["repomate","repomate::architecture","repomate::base","repomate::category","repomate::checkpoint","repomate::cli","repomate::component","repomate::configuration","repomate::database","repomate::link","repomate::metafile","repomate::package","repomate::repository","repomate::suite","repomate::architecture::all()","repomate::category::all()","repomate::component::all()","repomate::metafile#all()","repomate::suite::all()","repomate::architecture::allowed()","repomate::component::allowed()","repomate::suite::allowed()","repomate::package#check_package()","repomate::base#check_versions()","repomate::cli#choose_checkpoint()","repomate::link#cleanup()","repomate::configuration#configure()","repomate::architecture#create()","repomate::category#create()","repomate::checkpoint#create()","repomate::component#create()","repomate::link#create()","repomate::metafile#create()","repomate::repository#create()","repomate::suite#create()","repomate::package#create_checksums()","repomate::metafile#create_packages()","repomate::metafile#create_release()","repomate::checkpoint#create_table()","repomate::package#create_table()","repomate::architecture::dataset()","repomate::category::dataset()","repomate::component::dataset()","repomate::suite::dataset()","repomate::package#delete_checksums()","repomate::architecture#destroy()","repomate::category#destroy()","repomate::component#destroy()","repomate::database#destroy()","repomate::link#destroy()","repomate::metafile#destroy()","repomate::suite#destroy()","repomate::architecture#directory()","repomate::category#directory()","repomate::component#directory()","repomate::suite#directory()","repomate::architecture#exist?()","repomate::category#exist?()","repomate::component#exist?()","repomate::link#exist?()","repomate::suite#exist?()","repomate::database#exists?()","repomate::architecture#files()","repomate::component#files()","repomate::package#get_checksums()","repomate::architecture#is_allowed?()","repomate::component#is_allowed?()","repomate::suite#is_allowed?()","repomate::architecture#is_unused?()","repomate::component#is_unused?()","repomate::suite#is_unused?()","repomate::checkpoint#list()","repomate::base#list_packages()","repomate::cli#list_packages()","repomate::checkpoint#load()","repomate::configuration#merge()","repomate::architecture#name()","repomate::category#name()","repomate::component#name()","repomate::suite#name()","repomate::architecture::new()","repomate::base::new()","repomate::category::new()","repomate::checkpoint::new()","repomate::cli::new()","repomate::component::new()","repomate::configuration::new()","repomate::database::new()","repomate::link::new()","repomate::metafile::new()","repomate::package::new()","repomate::repository::new()","repomate::suite::new()","repomate::base#prepare_publish()","repomate::base#publish()","repomate::cli#publish()","repomate::database#query()","repomate::package#read_controlfile()","repomate::cli#save_checkpoint()","repomate::cli#setup()","repomate::metafile#sign()","repomate::base#stage()","repomate::cli#stage()","",""],"info":[["RepoMate","","RepoMate.html","","<p>RepoMate module\n<p>RepoMate module\n<p>RepoMate module\n"],["RepoMate::Architecture","","RepoMate/Architecture.html","","<p>Class for the architecture layer of the directory structure\n"],["RepoMate::Base","","RepoMate/Base.html","","<p>Class containing the main logic\n"],["RepoMate::Category","","RepoMate/Category.html","","<p>Class for the category layer of the directory structure\n"],["RepoMate::Checkpoint","","RepoMate/Checkpoint.html","","<p>Class containing the main logic\n"],["RepoMate::Cli","","RepoMate/Cli.html","","<p>Class for the commandline interface\n"],["RepoMate::Component","","RepoMate/Component.html","","<p>Class for the component layer of the directory structure\n"],["RepoMate::Configuration","","RepoMate/Configuration.html","","<p>Configuration class\n"],["RepoMate::Database","","RepoMate/Database.html","","<p>Class for the database\n"],["RepoMate::Link","","RepoMate/Link.html","","<p>Class containing the main logic\n"],["RepoMate::Metafile","","RepoMate/Metafile.html","","<p>Class that can create and delete all metafiles like Packages, Packages.gz,\nRelease and Release.gpg\n"],["RepoMate::Package","","RepoMate/Package.html","","<p>Class for reading debian packages\n"],["RepoMate::Repository","","RepoMate/Repository.html","","<p>Class for creating the repository structure\n"],["RepoMate::Suite","","RepoMate/Suite.html","","<p>Class for the suite layer of the directory structure\n"],["all","RepoMate::Architecture","RepoMate/Architecture.html#method-c-all","()","<p>Returns all directories without @rootdir\n"],["all","RepoMate::Category","RepoMate/Category.html#method-c-all","()","<p>Returns all directories\n"],["all","RepoMate::Component","RepoMate/Component.html#method-c-all","()","<p>Returns all directories without @rootdir\n"],["all","RepoMate::Metafile","RepoMate/Metafile.html#method-i-all","()","<p>Returns a lit of all existing metafiles as array\n"],["all","RepoMate::Suite","RepoMate/Suite.html#method-c-all","()","<p>Returns all directories without @rootdir\n"],["allowed","RepoMate::Architecture","RepoMate/Architecture.html#method-c-allowed","()","<p>Gets all configured architectures\n"],["allowed","RepoMate::Component","RepoMate/Component.html#method-c-allowed","()","<p>Gets all configured architectures\n"],["allowed","RepoMate::Suite","RepoMate/Suite.html#method-c-allowed","()","<p>Gets all configured architectures\n"],["check_package","RepoMate::Package","RepoMate/Package.html#method-i-check_package","()","<p>Checks if the given package is a debian package\n"],["check_versions","RepoMate::Base","RepoMate/Base.html#method-i-check_versions","(workload)","<p>Does the link job after checking versions through dpkg\n"],["choose_checkpoint","RepoMate::Cli","RepoMate/Cli.html#method-i-choose_checkpoint","()","<p>Choose a checkpoint to restore.\n"],["cleanup","RepoMate::Link","RepoMate/Link.html#method-i-cleanup","()","<p>cleans up unused directories\n"],["configure","RepoMate::Configuration","RepoMate/Configuration.html#method-i-configure","(configfile)","<p>Loads configfile\n"],["create","RepoMate::Architecture","RepoMate/Architecture.html#method-i-create","()","<p>Creates the directory strcuture of the architecture including all lower\nlayers\n"],["create","RepoMate::Category","RepoMate/Category.html#method-i-create","()","<p>Creates the directory strcuture of the category\n"],["create","RepoMate::Checkpoint","RepoMate/Checkpoint.html#method-i-create","()","<p>Saves a checkpoint\n"],["create","RepoMate::Component","RepoMate/Component.html#method-i-create","()","<p>Creates the directory strcuture of the component including all lower layers\n"],["create","RepoMate::Link","RepoMate/Link.html#method-i-create","(workload)","<p>links the workload\n"],["create","RepoMate::Metafile","RepoMate/Metafile.html#method-i-create","()","<p>Creates all metafiles\n"],["create","RepoMate::Repository","RepoMate/Repository.html#method-i-create","(suitename=nil, component=nil, architecture=nil)","<p>Creates the base structure\n"],["create","RepoMate::Suite","RepoMate/Suite.html#method-i-create","()","<p>Creates the directory strcuture of the suite including all lower layers\n"],["create_checksums","RepoMate::Package","RepoMate/Package.html#method-i-create_checksums","()","<p>Creates the checksums for a package\n"],["create_packages","RepoMate::Metafile","RepoMate/Metafile.html#method-i-create_packages","()","<p>Create Packages* files\n"],["create_release","RepoMate::Metafile","RepoMate/Metafile.html#method-i-create_release","()","<p>Create Release* files\n"],["create_table","RepoMate::Checkpoint","RepoMate/Checkpoint.html#method-i-create_table","()","<p>Create the checkpoint table\n"],["create_table","RepoMate::Package","RepoMate/Package.html#method-i-create_table","()","<p>Create the package table\n"],["dataset","RepoMate::Architecture","RepoMate/Architecture.html#method-c-dataset","(category=nil)","<p>Returns a dataset including the name of the architecture and the fullpath\nrecursive through all lower …\n"],["dataset","RepoMate::Category","RepoMate/Category.html#method-c-dataset","(category=nil)","<p>Returns a dataset including the name of the category and the fullpath\n"],["dataset","RepoMate::Component","RepoMate/Component.html#method-c-dataset","(category=nil)","<p>Returns a dataset including the name of the component, the fullpath\nrecursive through all lower layers …\n"],["dataset","RepoMate::Suite","RepoMate/Suite.html#method-c-dataset","(category=nil)","<p>Returns a dataset including the name of the suite, the fullpath recursive\nthrough all lower layers\n"],["delete_checksums","RepoMate::Package","RepoMate/Package.html#method-i-delete_checksums","()","<p>Gets checksums for the given package\n"],["destroy","RepoMate::Architecture","RepoMate/Architecture.html#method-i-destroy","()","<p>Deletes the architecture directory including all lower layers\n"],["destroy","RepoMate::Category","RepoMate/Category.html#method-i-destroy","()","<p>Deletes a categories directory\n"],["destroy","RepoMate::Component","RepoMate/Component.html#method-i-destroy","()","<p>Deletes the components directory including all lower layers\n"],["destroy","RepoMate::Database","RepoMate/Database.html#method-i-destroy","()","<p>Deletes a categories directory\n"],["destroy","RepoMate::Link","RepoMate/Link.html#method-i-destroy","(workload)","<p>unlinks workload\n"],["destroy","RepoMate::Metafile","RepoMate/Metafile.html#method-i-destroy","()","<p>Deletes all existing metafiles\n"],["destroy","RepoMate::Suite","RepoMate/Suite.html#method-i-destroy","()","<p>Deletes the suites directory including all lower layers\n"],["directory","RepoMate::Architecture","RepoMate/Architecture.html#method-i-directory","()","<p>Returns the directory strcuture of the architecture including all lower\nlayers\n"],["directory","RepoMate::Category","RepoMate/Category.html#method-i-directory","()","<p>Returns the full path of the categories directory\n"],["directory","RepoMate::Component","RepoMate/Component.html#method-i-directory","()","<p>Returns the directory strcuture of the component including all lower layers\n"],["directory","RepoMate::Suite","RepoMate/Suite.html#method-i-directory","()","<p>Returns the directory strcuture of the suite including all lower layers\n"],["exist?","RepoMate::Architecture","RepoMate/Architecture.html#method-i-exist-3F","()","<p>Checks if the architecture directory exists\n"],["exist?","RepoMate::Category","RepoMate/Category.html#method-i-exist-3F","()","<p>Checks if the category directory exists\n"],["exist?","RepoMate::Component","RepoMate/Component.html#method-i-exist-3F","()","<p>Checks if the component directory exists\n"],["exist?","RepoMate::Link","RepoMate/Link.html#method-i-exist-3F","(fullname)",""],["exist?","RepoMate::Suite","RepoMate/Suite.html#method-i-exist-3F","()","<p>Checks if the suite directory exists\n"],["exists?","RepoMate::Database","RepoMate/Database.html#method-i-exists-3F","()","<p>Checks if the database file already exists\n"],["files","RepoMate::Architecture","RepoMate/Architecture.html#method-i-files","()","<p>Returns a list of all debian files in the architecture directory\n"],["files","RepoMate::Component","RepoMate/Component.html#method-i-files","()","<p>Returns a list of all debian files in the component directory\n"],["get_checksums","RepoMate::Package","RepoMate/Package.html#method-i-get_checksums","()","<p>Gets checksums for the given package\n"],["is_allowed?","RepoMate::Architecture","RepoMate/Architecture.html#method-i-is_allowed-3F","()","<p>Checks if the architecture is allowed (See: configurationfile)\n"],["is_allowed?","RepoMate::Component","RepoMate/Component.html#method-i-is_allowed-3F","()","<p>Checks if the component is allowed (See: configurationfile)\n"],["is_allowed?","RepoMate::Suite","RepoMate/Suite.html#method-i-is_allowed-3F","()","<p>Checks if the suite is allowed (See: configurationfile)\n"],["is_unused?","RepoMate::Architecture","RepoMate/Architecture.html#method-i-is_unused-3F","(dir)","<p>Checks if directory is unused\n"],["is_unused?","RepoMate::Component","RepoMate/Component.html#method-i-is_unused-3F","(dir)","<p>Checks if directory is unused\n"],["is_unused?","RepoMate::Suite","RepoMate/Suite.html#method-i-is_unused-3F","(dir)","<p>Checks if directory is unused\n"],["list","RepoMate::Checkpoint","RepoMate/Checkpoint.html#method-i-list","()","<p>Returns a list of checkpoints for the cli\n"],["list_packages","RepoMate::Base","RepoMate/Base.html#method-i-list_packages","(category)","<p>Returns a list of packages\n"],["list_packages","RepoMate::Cli","RepoMate/Cli.html#method-i-list_packages","(options)","<p>List all packages, see cli output\n"],["load","RepoMate::Checkpoint","RepoMate/Checkpoint.html#method-i-load","(number)","<p>Loads a checkpoint\n"],["merge","RepoMate::Configuration","RepoMate/Configuration.html#method-i-merge","(filecontent=nil)","<p>Merges configfile content with defaults\n"],["name","RepoMate::Architecture","RepoMate/Architecture.html#method-i-name","()","<p>Returns the given architecture name (eg. all, amd64)\n"],["name","RepoMate::Category","RepoMate/Category.html#method-i-name","()","<p>Returns the name of the category (eg. pool, dists)\n"],["name","RepoMate::Component","RepoMate/Component.html#method-i-name","()","<p>Returns the given architecture name (eg. main, contrib, non-free)\n"],["name","RepoMate::Suite","RepoMate/Suite.html#method-i-name","()","<p>Returns the given suite name (eg. lenny, squeeze)\n"],["new","RepoMate::Architecture","RepoMate/Architecture.html#method-c-new","(architecture, component, suitename, category)","<p>Init\n"],["new","RepoMate::Base","RepoMate/Base.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Category","RepoMate/Category.html#method-c-new","(category)","<p>Init\n"],["new","RepoMate::Checkpoint","RepoMate/Checkpoint.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Cli","RepoMate/Cli.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Component","RepoMate/Component.html#method-c-new","(component, suitename, category)","<p>Init\n"],["new","RepoMate::Configuration","RepoMate/Configuration.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Database","RepoMate/Database.html#method-c-new","(dbfile)","<p>Init\n"],["new","RepoMate::Link","RepoMate/Link.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Metafile","RepoMate/Metafile.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Package","RepoMate/Package.html#method-c-new","(fullname, suitename, component)","<p>Init\n"],["new","RepoMate::Repository","RepoMate/Repository.html#method-c-new","()","<p>Init\n"],["new","RepoMate::Suite","RepoMate/Suite.html#method-c-new","(suitename, category)","<p>Init\n"],["prepare_publish","RepoMate::Base","RepoMate/Base.html#method-i-prepare_publish","()","<p>Returns a list of staged packages for cli confirmation packed as array of\nhashes\n"],["publish","RepoMate::Base","RepoMate/Base.html#method-i-publish","(workload)","<p>Publish all staged packages. Packages will be moved from stage to pool and\nlinked to dists\n"],["publish","RepoMate::Cli","RepoMate/Cli.html#method-i-publish","(options)","<p>Get’s all packages from the staging area. Packages need to be confirmed\nhere.\n"],["query","RepoMate::Database","RepoMate/Database.html#method-i-query","(sql)","<p>Executes a query\n"],["read_controlfile","RepoMate::Package","RepoMate/Package.html#method-i-read_controlfile","()","<p>Extracts the controlfile and returns is\n"],["save_checkpoint","RepoMate::Cli","RepoMate/Cli.html#method-i-save_checkpoint","()","<p>Save a checkpoint\n"],["setup","RepoMate::Cli","RepoMate/Cli.html#method-i-setup","(options)","<p>Sets up the base directory structure by calling the repository class\n"],["sign","RepoMate::Metafile","RepoMate/Metafile.html#method-i-sign","(file)","<p>Sign a file\n"],["stage","RepoMate::Base","RepoMate/Base.html#method-i-stage","(workload)","<p>Add’s a package to the staging area\n"],["stage","RepoMate::Cli","RepoMate/Cli.html#method-i-stage","(options, filename)","<p>Adds a given package to the staging area by calling the base class\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p>gem “slop”, “&gt;= 3.0.4” gem “gpgme”, “&gt;= …\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2012 Florian Speidel, Michael Ehrenreich and contributors\n<p>Permission is hereby granted, …\n"]]}}